#Tutorial from http://amsantac.co/blog/en/2015/11/28/classification-r.html
## applicato allla classificazione della duna

#### ERRORE RISOLTO!!

setwd("C:/SAL2017_Ortofoto_Multispectral")


library(rgdal)
library(raster)
library(caret)  #https://topepo.github.io/caret/model-training-and-tuning.html


#### Caricamento Ortofoto
img <- brick('SAL2017_CasalBorsetti_Ortofoto.tif')

names(img) <- c('B1','B2','B3','B4','B5','B6','B7','B8','B9','B10','B11','B12')

### Caricamento shapefile 
trainData <- shapefile ("C:/SAL2017_Ortofoto_Multispectral/casalborsetti_trainingPoints_SR")
responseCol <- "id"

###  estrazione training pixels values
dfAll = data.frame(matrix(vector(), nrow = 0, ncol = length(names(img)) + 1))   
for (i in 1:length(unique(trainData[[responseCol]]))){
  category <- unique(trainData[[responseCol]])[i]
  categorymap <- trainData[trainData[[responseCol]] == category,]
  dataSet <- extract(img, categorymap)
  if(is(trainData, "SpatialPointsDataFrame")){
    dataSet <- cbind(dataSet, class = as.numeric(rep(category, nrow(dataSet))))
    dfAll <- rbind(dfAll, dataSet[complete.cases(dataSet),])
  }
  if(is(trainData, "SpatialPolygonsDataFrame")){
    dataSet <- dataSet[!unlist(lapply(dataSet, is.null))]
    dataSet <- lapply(dataSet, function(x){cbind(x, class = as.numeric(rep(category, nrow(x))))})
    df <- do.call("rbind", dataSet)
    dfAll <- rbind(dfAll, df)
  }
}



# Crazione di un subset
nsamples <- 1000
sdfAll <- dfAll[sample(1:nrow(dfAll), nsamples), ]


### Classificazione RF - random forest

modFit_rf <- train(as.factor(class) ~ B3 + B4 + B5, method = "rf", data = sdfAll)

beginCluster()
preds_rf <- clusterR(img, raster::predict, args = list(model = modFit_rf))
endCluster()

plot(preds_rf)
